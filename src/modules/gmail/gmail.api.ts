import express from "express";
import { OAuth2Client } from "google-auth-library";
import nodemailer from "nodemailer";
import {
  assignLabelToMail,
  authenticateUser,
  getAllLabelsForEmailId,
  getMailFromMessageId,
  getMails,
  getRefreshToken,
  returnRedirectAuthUrl,
  sendEmailInQueue,
} from "./gmail.provider";
import { getLabelIdFromLabel, parseMailContent } from "../common/commonUtils";
import {
  getEmailIdFromToken,
  setLongLiveToken,
  validateAccessToken,
} from "./middleware/oAuthMiddleware";
import { RequestWithTokensAndEmail } from "../../types";


export const gmailRouter = express.Router();

gmailRouter.get("/auth", async (req, res) => {
  try {
    const authUrl = returnRedirectAuthUrl();
    res.redirect(authUrl);
  } catch (err) {
    console.log(err);
    return res.status(500).send("Error during auth url generation");
  }
});

gmailRouter.get("/auth/callback", async (req, res) => {
  try {
    const code = String(req.query.code);
    const tokens = await authenticateUser(code);
    return res.status(200).json(tokens);
  } catch (err) {
    console.log(err);
    return res.status(500).send("Error during token generation");
  }
});

gmailRouter.get("/auth/access-token", async (req, res) => {
  // Get access token from refresh token
  try {
    let refresh_token = req.query.refresh_token;

    if (!refresh_token) {
      // If the refresh token is not provided we need to throw an error
      return res.status(400).send("Please provide a refresh token");
    }
    refresh_token = String(refresh_token);

    const accessToken = await getRefreshToken(refresh_token);

    return res.status(200).send({
      access_token: accessToken,
    });
  } catch (err) {
    console.log(err);
    return res.status(500).send("Error while getting new access token: ");
  }
});

gmailRouter.get(
  "/mails",
  validateAccessToken,
  getEmailIdFromToken,
  async (req: RequestWithTokensAndEmail, res) => {
    try {
      const maxCountMail = req.query.maxCountMail
        ? Number(req.query.maxCountMail)
        : 50;

      const emailId = String(req.emailId);
      const accessToken = String(req.accessToken);
      const mails = await getMails(emailId, maxCountMail, accessToken);

      return res.status(200).send(mails);
    } catch (err) {
      console.log(err);
      res
        .status(500)
        .send("Error while getting mails for the provided emailId");
    }
  }
);

gmailRouter.get(
  "/mails/message",
  validateAccessToken,
  getEmailIdFromToken,
  async (req: RequestWithTokensAndEmail, res) => {
    try {
      let messageId = req.query.messageId;

      if (!messageId) {
        return res
          .status(400)
          .send("Please provide a valid messageId to get the specific mail");
      }
      messageId = String(messageId);

      const emailId = String(req.emailId);
      const accessToken = String(req.accessToken);
      const mail = await getMailFromMessageId(emailId, messageId, accessToken);

      return res.send(mail);
    } catch (err) {
      console.log(err);
      res.status(500).send("Error while getting mail for the given message id");
    }
  }
);

// Here the fromEmailId is our reachInBox and the toEmailId is the customers to whom we want
// to send business(autogenerated email)

// Send some mails using the toEmailId to the fromEmailId
// Get the mail in this combination (from,to,messageId)
// So the mail in the messageId will be parsed and labeled
// And a reply mail will be sent to the user in toEmailId
gmailRouter.post(
  "/send",
  setLongLiveToken,
  validateAccessToken,
  getEmailIdFromToken,
  async (req: RequestWithTokensAndEmail, res) => {
    try {
      let messageId = req.query.messageId;

      if (!messageId) {
        return res
          .status(400)
          .send("Please provide a valid messageId to get the specific mail");
      }
      messageId = String(messageId);

      const emailId = String(req.emailId);

      const refreshToken = String(req.refreshToken);

      const jobId = await sendEmailInQueue(emailId, messageId, refreshToken);

      return res
        .status(200)
        .send(
          `Reply mail for the messageId ${messageId} has been added to the queue ${jobId}`
        );
    } catch (err) {
      console.log(err);
      return res.status(500).send("Error during queuing the send mail");
    }
  }
);

gmailRouter.get(
  "/get-labels",
  validateAccessToken,
  getEmailIdFromToken,
  async (req: RequestWithTokensAndEmail, res) => {
    const emailId = String(req.emailId);
    const accessToken = String(req.accessToken);

    const response = await getAllLabelsForEmailId(
      emailId,

      accessToken
    );

    const labels = response.data.labels;

    console.log(labels);

    return res
      .status(200)
      .send(labels);
  }
);

gmailRouter.post(
  "/set-label",
  validateAccessToken,
  getEmailIdFromToken,
  async (req: RequestWithTokensAndEmail, res) => {
    try {
      let messageId = req.query.messageId;

      if (!messageId) {
        return res
          .status(400)
          .send("Please provide a valid messageId to get the specific mail");
      }
      messageId = String(messageId);

      let label = req.query.label;

      if (!label) {
        return res
          .status(400)
          .send("Please provide a valid label to assign it to a mail");
      }

      label = String(label);

      const emailId = String(req.emailId);
      const accessToken = String(req.accessToken);

      const assignedLabel = await assignLabelToMail(
        emailId,
        messageId,
        accessToken,
        label
      );

      //console.log(assignedLabel);

      return res
        .status(200)
        .send(`Label ${label} has been assigned to ${messageId}`);
    } catch (err) {
      console.log(err);
      return res.status(500).send("Error during setting the label");
    }
  }
);
